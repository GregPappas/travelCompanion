################################################################################
# Apache JMeter Property file
################################################################################

##   Licensed to the Apache Software Foundation (ASF) under one or more
##   contributor license agreements.  See the NOTICE file distributed with
##   this work for additional information regarding copyright ownership.
##   The ASF licenses this file to You under the Apache License, Version 2.0
##   (the "License"); you may not use this file except in compliance with
##   the License.  You may obtain a copy of the License at
## 
##       http://www.apache.org/licenses/LICENSE-2.0
## 
##   Unless required by applicable law or agreed to in writing, software
##   distributed under the License is distributed on an "AS IS" BASIS,
##   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
##   See the License for the specific language governing permissions and
##   limitations under the License.

#---------------------------------------------------------------------------
#         Logging Configuration
#---------------------------------------------------------------------------

# Note: JMeter uses Avalon (Excalibur) LogKit

# Logging Format
# see http://excalibur.apache.org/apidocs/org/apache/log/format/PatternFormatter.html

#
# Default format:
#log_format=%{time:yyyy/MM/dd HH:mm:ss} %5.5{priority} - %{category}: %{message} %{throwable}
# \n is automatically added to the end of the string
#
# Predefined formats in the JMeter LoggingManager:
#log_format_type=default
#log_format_type=thread_prefix
#log_format_type=thread_suffix
# default is as above
# thread_prefix adds the thread name as a prefix to the category
# thread_suffix adds the thread name as a suffix to the category
# Note that thread name is not included by default, as it requires extra processing.
#
# To change the logging format, define either log_format_type or log_format
# If both are defined, the type takes precedence
# Note that these properties cannot be defined using the -J or -D JMeter
# command-line flags, as the format will have already been determined by then
# However, they can be defined as JVM properties

#Logging levels for the logging categories in JMeter.  Correct values are FATAL_ERROR, ERROR, WARN, INFO, and DEBUG
# To set the log level for a package or individual class, use:
# log_level.[package_name].[classname]=[PRIORITY_LEVEL]
# But omit "org.apache" from the package name.  The classname is optional.  Further examples below.

log_level.jmeter=INFO
log_level.jmeter.junit=DEBUG
#log_level.jmeter.control=DEBUG
#log_level.jmeter.testbeans=DEBUG
#log_level.jmeter.engine=DEBUG
#log_level.jmeter.threads=DEBUG
#log_level.jmeter.gui=WARN
#log_level.jmeter.testelement=DEBUG
#log_level.jmeter.util=WARN
#log_level.jmeter.util.classfinder=WARN
#log_level.jmeter.test=DEBUG
#log_level.jmeter.protocol.http=DEBUG
# For CookieManager, AuthManager etc:
#log_level.jmeter.protocol.http.control=DEBUG
#log_level.jmeter.protocol.ftp=WARN
#log_level.jmeter.protocol.jdbc=DEBUG
#log_level.jmeter.protocol.java=WARN
#log_level.jmeter.testelements.property=DEBUG
log_level.jorphan=INFO
	

#Log file for log messages.
# You can specify a different log file for different categories via:
# log_file.[category]=[filename]
# category is equivalent to the package/class names described above

# Combined log file (for jmeter and jorphan)
#log_file=jmeter.log
# To redirect logging to standard output, try the following:
# (it will probably report an error, but output will be to stdout)
#log_file=

# Or define separate logs if required:
#log_file.jorphan=jorphan.log
#log_file.jmeter=jmeter.log

# If the filename contains  paired single-quotes, then the name is processed
# as a SimpleDateFormat format applied to the current date, for example:
#log_file='jmeter_'yyyyMMddHHmmss'.tmp'

# N.B. When JMeter starts, it sets the system property:
#    org.apache.commons.logging.Log
# to
#    org.apache.commons.logging.impl.LogKitLogger
# if not already set. This causes Apache and Commons HttpClient to use the same logging as JMeter

# Further logging configuration
# Excalibur logging provides the facility to configure logging using
# configuration files written in XML. This allows for such features as
# log file rotation which are not supported directly by JMeter.
#
# If such a file specified, it will be applied to the current logging
# hierarchy when that has been created.
# 
#log_config=logkit.xml


#---------------------------------------------------------------------------
# Results file configuration
#---------------------------------------------------------------------------

# This section helps determine how result data will be saved.
# The commented out values are the defaults.

# legitimate values: xml, csv, db.  Only xml and csv are currently supported.
jmeter.save.saveservice.output_format=xml


# true when field should be saved; false otherwise

# assertion_results_failure_message only affects CSV output
#jmeter.save.saveservice.assertion_results_failure_message=false
#
# legitimate values: none, first, all
jmeter.save.saveservice.assertion_results=all

#
jmeter.save.saveservice.data_type=true
jmeter.save.saveservice.label=true
jmeter.save.saveservice.response_code=true

# response_data is not currently supported for CSV output
jmeter.save.saveservice.response_data=true

# Save ResponseData for failed samples
jmeter.save.saveservice.response_data.on_error=true
jmeter.save.saveservice.response_message=true
jmeter.save.saveservice.successful=true
jmeter.save.saveservice.thread_name=true
jmeter.save.saveservice.time=true
jmeter.save.saveservice.subresults=true
jmeter.save.saveservice.assertions=true
jmeter.save.saveservice.latency=true
jmeter.save.saveservice.samplerData=true
jmeter.save.saveservice.responseHeaders=true
jmeter.save.saveservice.requestHeaders=true
jmeter.save.saveservice.encoding=true
jmeter.save.saveservice.bytes=true
jmeter.save.saveservice.url=true
jmeter.save.saveservice.filename=true
jmeter.save.saveservice.hostname=true
jmeter.save.saveservice.thread_counts=true
jmeter.save.saveservice.sample_count=true
jmeter.save.saveservice.idle_time=true

# Timestamp format - this only affects CSV output files
# legitimate values: none, ms, or a format suitable for SimpleDateFormat
#jmeter.save.saveservice.timestamp_format=ms
#jmeter.save.saveservice.timestamp_format=yyyy/MM/dd HH:mm:ss.SSS

# For use with Comma-separated value (CSV) files or other formats
# where the fields' values are separated by specified delimiters.
# Default:
#jmeter.save.saveservice.default_delimiter=,
# For TAB, since JMeter 2.3 one can use:
#jmeter.save.saveservice.default_delimiter=\t

# Only applies to CSV format files:
#jmeter.save.saveservice.print_field_names=false

# Optional list of JMeter variable names whose values are to be saved in the result data files.
# Use commas to separate the names. For example:
#sample_variables=SESSION_ID,REFERENCE
# N.B. The current implementation saves the values in XML as attributes,
# so the names must be valid XML names.
# Versions of JMeter after 2.3.2 send the variable to all servers
# to ensure that the correct data is available at the client.

# Optional xml processing instruction for line 2 of the file:
#jmeter.save.saveservice.xml_pi=<?xml-stylesheet type="text/xsl" href="../extras/jmeter-results-detail-report_21.xsl"?>

# Prefix used to identify filenames that are relative to the current base
#jmeter.save.saveservice.base_prefix=~/



